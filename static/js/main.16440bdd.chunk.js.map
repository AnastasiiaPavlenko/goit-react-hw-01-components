{"version":3,"sources":["components/profile/Profile.module.css","components/transactions/Transactions.module.css","components/friend-list/FriendList.module.css","components/stats/Stats.module.css","components/profile/Profile.js","components/stats/Stats.js","components/friend-list/FriendList.js","components/stats/statsInit.js","components/transactions/TransactionHistory.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","props","className","styles","profile","description","src","avatar","alt","name","tag","location","stats","list","label","quantity","followers","views","likes","Stats","title","length","statList","map","item","key","id","percentage","FriendListItem","friends","isOnline","statusOnline","status","notOnline","width","FriendList","friendList","TransactionHistory","tableSection","transactionHistory","thead","tableTitle","transactions","tbody","tdbody","type","amount","currency","App","user","items","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16440bdd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2VM8b\",\"description\":\"Profile_description__15Z3A\",\"avatar\":\"Profile_avatar__27k2E\",\"name\":\"Profile_name__UTi5J\",\"tag\":\"Profile_tag__1WSAF\",\"location\":\"Profile_location__2iOGF\",\"stats\":\"Profile_stats__2NWYr\",\"list\":\"Profile_list__AaTes\",\"label\":\"Profile_label__1CkjB\",\"quantity\":\"Profile_quantity__1lZTF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableSection\":\"Transactions_tableSection__KadCl\",\"transactionHistory\":\"Transactions_transactionHistory__c1xzz\",\"thead\":\"Transactions_thead__1jlEK\",\"tableTitle\":\"Transactions_tableTitle__1WuFg\",\"tbody\":\"Transactions_tbody__onlul\",\"tdbody\":\"Transactions_tdbody__RyffK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"FriendList_friendList__2sPPE\",\"item\":\"FriendList_item__352qX\",\"status\":\"FriendList_status__3692T\",\"statusOnline\":\"FriendList_statusOnline__3BCpK FriendList_status__3692T\",\"avatar\":\"FriendList_avatar__3xjPr\",\"name\":\"FriendList_name__3B5DM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"Stats_stats__nJkGb\",\"title\":\"Stats_title__3JY-z\",\"statList\":\"Stats_statList__29-8_\",\"item\":\"Stats_item__z8hyk\"};","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Profile.module.css';\n\nconst Profile = (props) => (\n    <div className={styles.profile}>\n        <div className={styles.description}>\n            <img\n                src={props.avatar}\n                alt=\"user avatar\"\n                className={styles.avatar}\n            />\n            <p className={styles.name}>{props.name}</p>\n            <p className={styles.tag}>@{props.tag}</p>\n            <p className={styles.location}>{props.location}</p>\n        </div>\n\n        <ul className={styles.stats}>\n            <li className={styles.list}>\n                <span className={styles.label}>Followers</span>\n                <span className={styles.quantity}>{props.stats.followers}</span>\n            </li>\n            <li className={styles.list}>\n                <span className={styles.label}>Views</span>\n                <span className={styles.quantity}>{props.stats.views}</span>\n            </li>\n            <li className={styles.list}>\n                <span className={styles.label}>Likes</span>\n                <span className={styles.quantity}>{props.stats.likes}</span>\n            </li>\n        </ul>\n    </div>\n);\n\nProfile.propTypes = {\n    name: T.string.isRequired,\n    tag: T.string.isRequired,\n    location: T.string.isRequired,\n    avatar: T.string.isRequired,\n    stats: T.shape({\n            followers: T.number.isRequired,\n            views: T.number.isRequired,\n            likes: T.number.isRequired})\n    .isRequired,\n};\n\nexport default Profile;","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Stats.module.css';\n\nconst Stats = (props) => (\n    <section className={styles.stats}>\n\n        {\n            props.title.length > 0 && (\n                <h2 className={styles.title}>{props.title}</h2>\n            )\n        }\n        <ul className={styles.statList}>\n            {props.stats.map(item => (\n                <li className={styles.item} key={item.id}>\n                    <span className=\"label\">{item.label}</span>\n                    <span className=\"percentage\">{item.percentage}</span>\n                </li>\n            ))}\n        </ul>\n    </section>\n);\n\nStats.propTypes = {\n    stats: T.arrayOf(T.shape({\n        id: T.string.isRequired,\n        label: T.string.isRequired,\n        percentage: T.number.isRequired\n    })\n    ).isRequired,\n};\n\nexport default Stats;","import React from 'react';\nimport T from 'prop-types';\nimport friends from './friends.json';\nimport styles from './FriendList.module.css';\n\nconst isOnline = (styles) => {\n    return <span className={styles.statusOnline} />;\n};\n\nconst notOnline = (styles) => {\n    return <span className={styles.status} />;\n};\n\nconst FriendListItem = (props) => (\n    props.friends.map(item => (\n        <li className={styles.item} key={item.id}>\n            {item.isOnline ? isOnline(styles) : notOnline(styles)}\n            <img className={styles.avatar} src={item.avatar} alt=\"\" width=\"48\" />\n            <p className={styles.name}>{item.name}</p>\n        </li>\n    ))\n);\n\nconst FriendList = (props) => (\n    <ul className={styles.friendList}>\n        <>\n            <FriendListItem friends={friends} />\n        </>\n    </ul>\n);\n\nFriendListItem.propTypes = {\n    friends: T.arrayOf(T.shape({\n        name: T.string.isRequired,\n        avatar: T.string.isRequired,\n        isOnline: T.bool.isRequired,\n        id: T.number.isRequired\n    }))\n};\n\nexport default FriendList;\n","const stats = [\n    { id: 'id-1', label: '.docx', percentage: 22 },\n    { id: 'id-2', label: '.pdf', percentage: 4 },\n    { id: 'id-3', label: '.mp3', percentage: 17 },\n    { id: 'id-4', label: '.psd', percentage: 47 },\n    { id: 'id-5', label: '.pdf', percentage: 10 },\n  ];\n  \nexport default stats;","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Transactions.module.css';\n\nconst TransactionHistory = (props) => (\n    <div className={styles.tableSection}>\n        <table className={styles.transactionHistory}>\n            <thead className={styles.thead}>\n                <tr className={styles.tableTitle}>\n                    <th>Type</th>\n                    <th>Amount</th>\n                    <th>Currency</th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.transactions.map(item => (\n                    <tr className={styles.tbody} key={item.id}>\n                        <td className={styles.tdbody}>{item.type}</td>\n                        <td className={styles.tdbody}>{item.amount}</td>\n                        <td className={styles.tdbody}>{item.currency}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    </div>\n);\n\nTransactionHistory.propTypes = {\n    transactions: T.arrayOf(T.shape({\n        id: T.string.isRequired,\n        type: T.string.isRequired,\n        amount: T.string.isRequired,\n        currency: T.string.isRequired\n    })).isRequired\n};\n\nexport default TransactionHistory;","import React from 'react';\nimport Profile from './profile/Profile';\nimport Stats from './stats/Stats';\nimport FriendList from './friend-list/FriendList';\nimport user from './profile/user.json';\nimport stats from './stats/statsInit';\nimport friends from './friend-list/friends.json';\nimport TransactionHistory from './transactions/TransactionHistory';\nimport items from './transactions/transactions.json';\n\nconst App = () => (\n    <>\n        <Profile {...user} />\n        <Stats title=\"Upload stats\" stats={stats} />\n        <FriendList friends={friends} />\n        <TransactionHistory transactions={items} />\n    </>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}